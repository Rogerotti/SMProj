<Window x:Class="VJPlayer.Views.CoreWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:VJPlayer.Views"
        xmlns:uc="clr-namespace:VJPlayer.Views.CustomUserControls"
        xmlns:ic="clr-namespace:VJPlayer.Commands"
        xmlns:converters="clr-namespace:VJPlayer.Converters"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:galasoft="GalaSoft.MvvmLight.Platform"
        xmlns:wi="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:effects="clr-namespace:EffectsLibrary.Effects;assembly=EffectsLibrary"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        mc:Ignorable="d"
        x:Name="coreWindow"
        Title="VJPlayer"
        Width="600"
        Height="350"
        Background="#FF202020"
        AllowDrop="True"
        WindowStyle="None"
        AllowsTransparency="True"
        MinWidth="525"
        MinHeight="90"
        ResizeMode="CanResizeWithGrip"
        Icon="/VJPlayer;component/Resources/Images/icon_256_256.png"
    >
    <Window.Resources>
        <converters:MediaModelPlayingStateToVisibilityConverter x:Key="PlayingConverter"></converters:MediaModelPlayingStateToVisibilityConverter>
        <converters:MediaModelIsPausedToVisibilityConverter x:Key="PauseConverter"></converters:MediaModelIsPausedToVisibilityConverter>
        <converters:DownloadConverter x:Key="DownloadConverter"></converters:DownloadConverter>
    </Window.Resources>


    <Grid Background="Transparent"        
          Tag="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}}}">

        <Grid.ContextMenu>
            <ContextMenu>
                <MenuItem Header="Close" Command="{Binding Path=CloseWindowCommand}" 
                           CommandParameter="{Binding PlacementTarget.Tag,
                                             RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>

                <MenuItem Header="Minimize" Command="{Binding Path=MinimizeWindowCommand}"      
                          CommandParameter="{Binding PlacementTarget.Tag,RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>

                <Separator/>

                <MenuItem Header="Spawn New Window" Command="{Binding Path=SpawnNewWindowCommand}"      
                          CommandParameter="{Binding PlacementTarget.Tag,RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>

            </ContextMenu>
            
        </Grid.ContextMenu>

     
        
        <TextBlock
            VerticalAlignment="Center"
            HorizontalAlignment="Center"
            Foreground="White"
            Text="Drop content here"
            />

        <Grid x:Name="EffectGrid">

            <MediaElement x:Name="mediaElement"
                          LoadedBehavior="Manual"
                          ScrubbingEnabled="True"
                          MediaEnded="mediaElement_MediaEnded">
            </MediaElement>

        </Grid>

        <Grid HorizontalAlignment="Stretch"
              Height="60"
              VerticalAlignment="Bottom"
              MouseEnter="MediaControlsCanvas_MouseEnter"
              MouseLeave="MediaControlsCanvas_MouseLeave"
              Background="#00FFFFFF"
              >

            <Grid.RowDefinitions>
                <RowDefinition Height="2*" />
                <RowDefinition Height="5*" />
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="50" />
                <ColumnDefinition Width="5" />
                <ColumnDefinition Width="40" />
                <ColumnDefinition Width="40" />
                <ColumnDefinition Width="40" />
                <ColumnDefinition Width="40" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="40" />
                <ColumnDefinition Width="50" />
                <ColumnDefinition Width="50" />
            </Grid.ColumnDefinitions>


            <TextBlock x:Name="currentMediaTime" Text="--:--" Grid.Row="0" Grid.Column="0" TextAlignment="Center" Foreground="#FF00A2FF" FontSize="13" HorizontalAlignment="Center"/>

            <TextBlock x:Name="MediaTime" Text="--:--" Grid.Row="0" Grid.Column="9" TextAlignment="Center" Foreground="#FF00A2FF" FontSize="13"></TextBlock>

            <Button x:Name="playButton" Content="Play" Grid.Row="1" Grid.Column="0" Width="40" Height="40" Command="{Binding Path=PlayCommand}" CommandParameter="{Binding ElementName=mediaElement}" Visibility="{Binding MediaModel.State,  Converter={StaticResource PlayingConverter}}">
            </Button>

            <Button x:Name="pauseButton" Content="Pause" Grid.Row="1" Grid.Column="0" Width="40" Height="40" Command="{Binding Path=PauseCommand}" CommandParameter="{Binding ElementName=mediaElement}" Visibility="{Binding MediaModel.State, Converter={StaticResource PauseConverter}}">
                <!--todo: wrzucic <Image> </Image>-->
            </Button>

            <Button x:Name="nextButton" Content="Next" Grid.Row="1" Grid.Column="4" Width="40" Height="40">
            </Button>

            <Button x:Name="previousButton" Content="Prev" Grid.Row="1" Grid.Column="2" Width="40" Height="40" >
            </Button>


            <Button x:Name="stopButton" Content="Stop" Grid.Row="1" Grid.Column="3" Width="40" Height="40" Command="{Binding Path=StopCommand}" CommandParameter="{Binding ElementName=mediaElement}" >
            </Button>

            <ToggleButton x:Name="loopButton" Content="Loop" Command="{Binding Path=LoopCommand}" IsChecked="{Binding MediaModel.Loop, Mode=TwoWay}" Grid.Row="1" Grid.Column="5"  Width="40" Height="40" >

            </ToggleButton>

            <uc:ThreeThumbSlider x:Name="slider" MiddleValue="0" LowerValue="0"  Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="8"  UpperValue="{Binding MediaModel.TotalLength}" LowerSliderDragStarted="LowerSliderDragStarted" LowerSliderDragCompleted="LowerSliderDragCompleted"  MiddleSliderDragCompleted="sliderMiddleSliderDragCompleted" MiddleSliderDragStarted="sliderMiddleSliderDragStarted"  LowerValueChanged="LowerLoopSliderValueChanged" UpperValueChanged="UpperLoopSliderValueChanged" MiddleValueChanged="SliderValueChanged" />

            <ToggleButton x:Name="muteButton" Content="Mute" Grid.Column="7" Grid.Row="1" Width="40" Command="{Binding Path=MuteCommand}" CommandParameter="{Binding ElementName=mediaElement}">
            </ToggleButton>

            <Button x:Name="youtubeButton"  Content="YT" Command="{Binding Path=SpawnYouTubePickerCommand}"  Grid.Row="1" Grid.Column="6" Grid.ColumnSpan="2"  Width="40" Height="40" >
            </Button>

            <Button x:Name="effectsButton" Content="FX" Command="{Binding Path=SpawnEffectPickerCommand}"  Grid.Row="1" Grid.Column="5" Grid.ColumnSpan="2" Width="40" Height="40">
                <Button.CommandParameter>
                    <MultiBinding Converter="{StaticResource DownloadConverter}">
                        <Binding  ElementName="mediaElement"/>
                        <Binding  Path="Effects" />
                        <Binding  ElementName="coreWindow" />
                    </MultiBinding>
                </Button.CommandParameter>
            </Button>
            
            <Slider
                HorizontalContentAlignment="Right" Value="{Binding MediaModel.Volume, Mode=TwoWay}" Minimum="0" Maximum="1" TickFrequency="0.01" ValueChanged="VolumeValueChanged"  Grid.Column="8" Grid.Row="1" Grid.ColumnSpan="2"  VerticalAlignment="Center" Margin="5">
                
            </Slider>
            
        </Grid>
    </Grid>
    <wi:Interaction.Triggers>
        <wi:EventTrigger EventName="Drop">
            <ei:CallMethodAction
            TargetObject="{Binding}"
            MethodName="DropEvent"/>
        </wi:EventTrigger>
    </wi:Interaction.Triggers>
</Window>
